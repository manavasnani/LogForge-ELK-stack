{"PayloadData1":"Severity = Warning","PayloadData2":"Command Name: Invoke-WebRequest","PayloadData3":"CommandType: Cmdlet","PayloadData4":"Script Name: ","PayloadData5":"HostApplication: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe","PayloadData6":"Host Name: ConsoleHost","UserName":"DELL_G15\\manav","MapDescription":"Executing pipeline","ChunkNumber":0,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"ContextInfo\",\"#text\":\"        Severity = Warning,         Host Name = ConsoleHost,         Host Version = 5.1.26100.4202,         Host ID = bf835c6e-0a2d-47cc-8b07-f59331542d84,         Host Application = C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe,         Engine Version = 5.1.26100.4202,         Runspace ID = cf4c0773-8719-4e11-b3e0-2c36ce466a64,         Pipeline ID = 8,         Command Name = Invoke-WebRequest,         Command Type = Cmdlet,         Script Name = ,         Command Path = ,         Sequence Number = 15,         User = DELL_G15\\\\manav,         Connected User = ,         Shell ID = Microsoft.PowerShell, \"},{\"@Name\":\"UserData\"},{\"@Name\":\"Payload\",\"#text\":\"Error Message = Example Domain, This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission., More information..., Fully Qualified Error ID = WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand, Recommended Action = , \"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4100,"EventRecordId":"76660","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:21.8960018+00:00","RecordNumber":1}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: powershell -ExecutionPolicy Bypass -File \"C:\\Users\\Public\\malware.ps1\"","MapDescription":"Contains contents of scripts run","ChunkNumber":0,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"powershell -ExecutionPolicy Bypass -File \\\"C:\\\\Users\\\\Public\\\\malware.ps1\\\"\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"5441f7ce-8ac0-424f-ae71-3169d363bb68\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76661","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:32.8474272+00:00","RecordNumber":2}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"Updater\" -Value \"powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File malware.ps1\"","MapDescription":"Contains contents of scripts run","ChunkNumber":0,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"Set-ItemProperty -Path \\\"HKCU:\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\" -Name \\\"Updater\\\" -Value \\\"powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File malware.ps1\\\"\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"cccca1f6-fcec-46f4-bc3b-d4be5d4ce10b\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76663","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:47.2249863+00:00","RecordNumber":3}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpComputerStatus', $script:ClassVersion = '', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-MpComputerStatus, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpComputerStatus')],     param(,     ,     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [int],     ${ThrottleLimit},,     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpComputerStatus.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpComputerStatus' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":0,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpComputerStatus', $script:ClassVersion = '', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-MpComputerStatus, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpComputerStatus')],     param(,     ,     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [int],     ${ThrottleLimit},,     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpComputerStatus.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Get-MpComputerStatus' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"98fb75e9-899f-4acf-ab9b-9a6fc910545b\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76664","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.7750726+00:00","RecordNumber":4}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'root\\Microsoft\\Windows\\Defender\\MSFT_MpPreference', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Set-MpPreference, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionPath},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionExtension},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionProcess},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionIpAddress},,     [Parameter(ParameterSetName='Set0')],     [Alias('rtsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Both','Incoming','Outcoming')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection],     ${RealTimeScanDirection},,     [Parameter(ParameterSetName='Set0')],     [Alias('qpiad')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${QuarantinePurgeItemsAfterDelay},,     [Parameter(ParameterSetName='Set0')],     [Alias('rsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day],     ${RemediationScheduleDay},,     [Parameter(ParameterSetName='Set0')],     [Alias('rst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [datetime],     ${RemediationScheduleTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('repcs')],     [ValidateSet('NotConfigured','Block','Audit','Off')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState],     ${RemoteEncryptionProtectionConfiguredState},,     [Parameter(ParameterSetName='Set0')],     [Alias('repmbt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${RemoteEncryptionProtectionMaxBlockTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('repa')],     [ValidateSet('Low','Medium','High')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness],     ${RemoteEncryptionProtectionAggressiveness},,     [Parameter(ParameterSetName='Set0')],     [Alias('repe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${RemoteEncryptionProtectionExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpcs')],     [ValidateSet('NotConfigured','Block','Audit','Off')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState],     ${BruteForceProtectionConfiguredState},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpmbt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${BruteForceProtectionMaxBlockTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpa')],     [ValidateSet('Low','Medium','High')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness],     ${BruteForceProtectionAggressiveness},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${BruteForceProtectionExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfplnb')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${BruteForceProtectionLocalNetworkBlocking},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpslp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${BruteForceProtectionSkipLearningPeriod},,     [Parameter(ParameterSetName='Set0')],     [Alias('raat')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ReportingAdditionalActionTimeOut},,     [Parameter(ParameterSetName='Set0')],     [Alias('rcto')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ReportingCriticalFailureTimeOut},,     [Parameter(ParameterSetName='Set0')],     [Alias('rncto')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ReportingNonCriticalTimeOut},,     [Parameter(ParameterSetName='Set0')],     [Alias('shri')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ServiceHealthReportInterval},,     [Parameter(ParameterSetName='Set0')],     [Alias('rdsde')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ReportDynamicSignatureDroppedEvent},,     [Parameter(ParameterSetName='Set0')],     [Alias('saclf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [byte],     ${ScanAvgCPULoadFactor},,     [Parameter(ParameterSetName='Set0')],     [Alias('csbr')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${CheckForSignaturesBeforeRunningScan},,     [Parameter(ParameterSetName='Set0')],     [Alias('spiad')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ScanPurgeItemsAfterDelay},,     [Parameter(ParameterSetName='Set0')],     [Alias('soiie')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ScanOnlyIfIdleEnabled},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('QuickScan','FullScan')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType],     ${ScanParameters},,     [Parameter(ParameterSetName='Set0')],     [Alias('scsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day],     ${ScanScheduleDay},,     [Parameter(ParameterSetName='Set0')],     [Alias('scsqst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [datetime],     ${ScanScheduleQuickScanTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('scst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [datetime],     ${ScanScheduleTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('tfsso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ThrottleForScheduledScanOnly},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigfagp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureFirstAuGracePeriod},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigagp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureAuGracePeriod},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigdufss')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${SignatureDefinitionUpdateFileSharesSources},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigduoswo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${SignatureDisableUpdateOnStartupWithoutEngine},,     [Parameter(ParameterSetName='Set0')],     [Alias('sfo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${SignatureFallbackOrder},,     [Parameter(ParameterSetName='Set0')],     [Alias('ssp','SecurityIntelligenceLocation','ssl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${SharedSignaturesPath},,     [Parameter(ParameterSetName='Set0')],     [Alias('sspsch','SecurityIntelligenceLocationUpdateAtScheduledTimeOnly')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${SharedSignaturesPathUpdateAtScheduledTimeOnly},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day],     ${SignatureScheduleDay},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [datetime],     ${SignatureScheduleTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('siguci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureUpdateCatchupInterval},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigui')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureUpdateInterval},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigbui')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureBlobUpdateInterval},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigbfs')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${SignatureBlobFileSharesSources},,     [Parameter(ParameterSetName='Set0')],     [Alias('mcupd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${MeteredConnectionUpdates},,     [Parameter(ParameterSetName='Set0')],     [Alias('anpws')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${AllowNetworkProtectionOnWinServer},,     [Parameter(ParameterSetName='Set0')],     [Alias('ddtgp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableDatagramProcessing},,     [Parameter(ParameterSetName='Set0')],     [Alias('ecwtb')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableConvertWarnToBlock},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCpuThrottleOnIdleScans},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','Basic','Advanced')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType],     ${MAPSReporting},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('AlwaysPrompt','SendSafeSamples','NeverSend','SendAllSamples')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType],     ${SubmitSamplesConsent},,     [Parameter(ParameterSetName='Set0')],     [Alias('dae')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableAutoExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('dpm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisablePrivacyMode},,     [Parameter(ParameterSetName='Set0')],     [Alias('rstt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${RandomizeScheduleTaskTimes},,     [Parameter(ParameterSetName='Set0')],     [Alias('srt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SchedulerRandomizationTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('dbm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableBehaviorMonitoring},,     [Parameter(ParameterSetName='Set0')],     [Alias('dips')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableIntrusionPreventionSystem},,     [Parameter(ParameterSetName='Set0')],     [Alias('dioavp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableIOAVProtection},,     [Parameter(ParameterSetName='Set0')],     [Alias('drtm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableRealtimeMonitoring},,     [Parameter(ParameterSetName='Set0')],     [Alias('dscrptsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableScriptScanning},,     [Parameter(ParameterSetName='Set0')],     [Alias('darchsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableArchiveScanning},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcfsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCatchupFullScan},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcqsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCatchupQuickScan},,     [Parameter(ParameterSetName='Set0')],     [Alias('demsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableEmailScanning},,     [Parameter(ParameterSetName='Set0')],     [Alias('drdsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableRemovableDriveScanning},,     [Parameter(ParameterSetName='Set0')],     [Alias('drp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableRestorePoint},,     [Parameter(ParameterSetName='Set0')],     [Alias('dsmndfsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableScanningMappedNetworkDrivesForFullScan},,     [Parameter(ParameterSetName='Set0')],     [Alias('dsnf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableScanningNetworkFiles},,     [Parameter(ParameterSetName='Set0')],     [Alias('adsnftioav')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ApplyDisableNetworkScanningToIOAV},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${UILockdown},,     [Parameter(ParameterSetName='Set0')],     [Alias('tiddefaci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [long[]],     ${ThreatIDDefaultAction_Ids},,     [Parameter(ParameterSetName='Set0')],     [Alias('tiddefaca')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction","MapDescription":"Contains contents of scripts run","ChunkNumber":0,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'root\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpPreference', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Set-MpPreference, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionPath},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionExtension},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionProcess},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionIpAddress},,     [Parameter(ParameterSetName='Set0')],     [Alias('rtsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Both','Incoming','Outcoming')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection],     ${RealTimeScanDirection},,     [Parameter(ParameterSetName='Set0')],     [Alias('qpiad')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${QuarantinePurgeItemsAfterDelay},,     [Parameter(ParameterSetName='Set0')],     [Alias('rsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day],     ${RemediationScheduleDay},,     [Parameter(ParameterSetName='Set0')],     [Alias('rst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [datetime],     ${RemediationScheduleTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('repcs')],     [ValidateSet('NotConfigured','Block','Audit','Off')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState],     ${RemoteEncryptionProtectionConfiguredState},,     [Parameter(ParameterSetName='Set0')],     [Alias('repmbt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${RemoteEncryptionProtectionMaxBlockTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('repa')],     [ValidateSet('Low','Medium','High')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness],     ${RemoteEncryptionProtectionAggressiveness},,     [Parameter(ParameterSetName='Set0')],     [Alias('repe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${RemoteEncryptionProtectionExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpcs')],     [ValidateSet('NotConfigured','Block','Audit','Off')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState],     ${BruteForceProtectionConfiguredState},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpmbt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${BruteForceProtectionMaxBlockTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpa')],     [ValidateSet('Low','Medium','High')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness],     ${BruteForceProtectionAggressiveness},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${BruteForceProtectionExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfplnb')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${BruteForceProtectionLocalNetworkBlocking},,     [Parameter(ParameterSetName='Set0')],     [Alias('bfpslp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${BruteForceProtectionSkipLearningPeriod},,     [Parameter(ParameterSetName='Set0')],     [Alias('raat')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ReportingAdditionalActionTimeOut},,     [Parameter(ParameterSetName='Set0')],     [Alias('rcto')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ReportingCriticalFailureTimeOut},,     [Parameter(ParameterSetName='Set0')],     [Alias('rncto')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ReportingNonCriticalTimeOut},,     [Parameter(ParameterSetName='Set0')],     [Alias('shri')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ServiceHealthReportInterval},,     [Parameter(ParameterSetName='Set0')],     [Alias('rdsde')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ReportDynamicSignatureDroppedEvent},,     [Parameter(ParameterSetName='Set0')],     [Alias('saclf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [byte],     ${ScanAvgCPULoadFactor},,     [Parameter(ParameterSetName='Set0')],     [Alias('csbr')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${CheckForSignaturesBeforeRunningScan},,     [Parameter(ParameterSetName='Set0')],     [Alias('spiad')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ScanPurgeItemsAfterDelay},,     [Parameter(ParameterSetName='Set0')],     [Alias('soiie')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ScanOnlyIfIdleEnabled},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('QuickScan','FullScan')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType],     ${ScanParameters},,     [Parameter(ParameterSetName='Set0')],     [Alias('scsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day],     ${ScanScheduleDay},,     [Parameter(ParameterSetName='Set0')],     [Alias('scsqst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [datetime],     ${ScanScheduleQuickScanTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('scst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [datetime],     ${ScanScheduleTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('tfsso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ThrottleForScheduledScanOnly},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigfagp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureFirstAuGracePeriod},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigagp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureAuGracePeriod},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigdufss')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${SignatureDefinitionUpdateFileSharesSources},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigduoswo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${SignatureDisableUpdateOnStartupWithoutEngine},,     [Parameter(ParameterSetName='Set0')],     [Alias('sfo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${SignatureFallbackOrder},,     [Parameter(ParameterSetName='Set0')],     [Alias('ssp','SecurityIntelligenceLocation','ssl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${SharedSignaturesPath},,     [Parameter(ParameterSetName='Set0')],     [Alias('sspsch','SecurityIntelligenceLocationUpdateAtScheduledTimeOnly')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${SharedSignaturesPathUpdateAtScheduledTimeOnly},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day],     ${SignatureScheduleDay},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [datetime],     ${SignatureScheduleTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('siguci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureUpdateCatchupInterval},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigui')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureUpdateInterval},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigbui')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SignatureBlobUpdateInterval},,     [Parameter(ParameterSetName='Set0')],     [Alias('sigbfs')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${SignatureBlobFileSharesSources},,     [Parameter(ParameterSetName='Set0')],     [Alias('mcupd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${MeteredConnectionUpdates},,     [Parameter(ParameterSetName='Set0')],     [Alias('anpws')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${AllowNetworkProtectionOnWinServer},,     [Parameter(ParameterSetName='Set0')],     [Alias('ddtgp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableDatagramProcessing},,     [Parameter(ParameterSetName='Set0')],     [Alias('ecwtb')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableConvertWarnToBlock},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCpuThrottleOnIdleScans},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','Basic','Advanced')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType],     ${MAPSReporting},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('AlwaysPrompt','SendSafeSamples','NeverSend','SendAllSamples')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType],     ${SubmitSamplesConsent},,     [Parameter(ParameterSetName='Set0')],     [Alias('dae')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableAutoExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('dpm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisablePrivacyMode},,     [Parameter(ParameterSetName='Set0')],     [Alias('rstt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${RandomizeScheduleTaskTimes},,     [Parameter(ParameterSetName='Set0')],     [Alias('srt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${SchedulerRandomizationTime},,     [Parameter(ParameterSetName='Set0')],     [Alias('dbm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableBehaviorMonitoring},,     [Parameter(ParameterSetName='Set0')],     [Alias('dips')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableIntrusionPreventionSystem},,     [Parameter(ParameterSetName='Set0')],     [Alias('dioavp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableIOAVProtection},,     [Parameter(ParameterSetName='Set0')],     [Alias('drtm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableRealtimeMonitoring},,     [Parameter(ParameterSetName='Set0')],     [Alias('dscrptsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableScriptScanning},,     [Parameter(ParameterSetName='Set0')],     [Alias('darchsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableArchiveScanning},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcfsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCatchupFullScan},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcqsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCatchupQuickScan},,     [Parameter(ParameterSetName='Set0')],     [Alias('demsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableEmailScanning},,     [Parameter(ParameterSetName='Set0')],     [Alias('drdsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableRemovableDriveScanning},,     [Parameter(ParameterSetName='Set0')],     [Alias('drp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableRestorePoint},,     [Parameter(ParameterSetName='Set0')],     [Alias('dsmndfsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableScanningMappedNetworkDrivesForFullScan},,     [Parameter(ParameterSetName='Set0')],     [Alias('dsnf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableScanningNetworkFiles},,     [Parameter(ParameterSetName='Set0')],     [Alias('adsnftioav')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ApplyDisableNetworkScanningToIOAV},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${UILockdown},,     [Parameter(ParameterSetName='Set0')],     [Alias('tiddefaci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [long[]],     ${ThreatIDDefaultAction_Ids},,     [Parameter(ParameterSetName='Set0')],     [Alias('tiddefaca')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76665","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9409782+00:00","RecordNumber":5}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: []],     ${ThreatIDDefaultAction_Actions},,     [Parameter(ParameterSetName='Set0')],     [Alias('unktdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${UnknownThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [Alias('ltdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${LowThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [Alias('mtdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${ModerateThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [Alias('htdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${HighThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [Alias('stdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${SevereThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [switch],     ${Force},,     [Parameter(ParameterSetName='Set0')],     [Alias('dbaf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableBlockAtFirstSeen},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','Enabled','AuditMode')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType],     ${PUAProtection},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Default','Moderate','High','HighPlus','ZeroTolerance')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType],     ${CloudBlockLevel},,     [Parameter(ParameterSetName='Set0')],     [Alias('cloudextimeout')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${CloudExtendedTimeout},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','Enabled','AuditMode')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType],     ${EnableNetworkProtection},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','Enabled','AuditMode','BlockDiskModificationOnly','AuditDiskModificationOnly')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType],     ${EnableControlledFolderAccess},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionOnlyExclusions},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessAllowedApplications},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessProtectedFolders},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_Ids},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]],     ${AttackSurfaceReductionRules_Actions},,     [Parameter(ParameterSetName='Set0')],     [Alias('elcp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableLowCpuPriority},,     [Parameter(ParameterSetName='Set0')],     [Alias('efhc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableFileHashComputation},,     [Parameter(ParameterSetName='Set0')],     [Alias('efsobp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableFullScanOnBatteryPower},,     [Parameter(ParameterSetName='Set0')],     [Alias('ppurl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ProxyPacUrl},,     [Parameter(ParameterSetName='Set0')],     [Alias('proxsrv')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ProxyServer},,     [Parameter(ParameterSetName='Set0')],     [Alias('proxbps')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ProxyBypass},,     [Parameter(ParameterSetName='Set0')],     [Alias('fupo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ForceUseProxyOnly},,     [Parameter(ParameterSetName='Set0')],     [Alias('dtlsp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableTlsParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dftpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableFtpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dhttpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableHttpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('ddnsp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableDnsParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('ddnstcpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableDnsOverTcpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dsshp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableSshParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('puc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType],     ${PlatformUpdatesChannel},,     [Parameter(ParameterSetName='Set0')],     [Alias('euc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType],     ${EngineUpdatesChannel},,     [Parameter(ParameterSetName='Set0')],     [Alias('duc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('NotConfigured','Staged','Broad')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType],     ${DefinitionUpdatesChannel},,     [Parameter(ParameterSetName='Set0')],     [Alias('dgr')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableGradualRelease},,     [Parameter(ParameterSetName='Set0')],     [Alias('anpdl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${AllowNetworkProtectionDownLevel},,     [Parameter(ParameterSetName='Set0')],     [Alias('adpows')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${AllowDatagramProcessingOnWinServer},,     [Parameter(ParameterSetName='Set0')],     [Alias('ednss')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableDnsSinkhole},,     [Parameter(ParameterSetName='Set0')],     [Alias('dicf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableInboundConnectionFiltering},,     [Parameter(ParameterSetName='Set0')],     [Alias('drdpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableRdpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dnppt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableNetworkProtectionPerfTelemetry},,     [Parameter(ParameterSetName='Set0')],     [Alias('tlps')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${TrustLabelProtectionStatus},,     [Parameter(ParameterSetName='Set0')],     [Alias('astai')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${AllowSwitchToAsyncInspection},,     [Parameter(ParameterSetName='Set0')],     [Alias('scso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ScanScheduleOffset},,     [Parameter(ParameterSetName='Set0')],     [Alias('dtdtf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableTDTFeature},,     [Parameter(ParameterSetName='Set0')],     [Alias('dtp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableTamperProtection},,     [Parameter(ParameterSetName='Set0')],     [Alias('dsmtpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableSmtpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dquicp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableQuicParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('nprepmode')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${NetworkProtectionReputationMode},,     [Parameter(ParameterSetName='Set0')],     [Alias('euso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableUdpSegmentationOffload},,     [Parameter(ParameterSetName='Set0')],     [Alias('euro')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableUdpReceiveOffload},,     [Parameter(ParameterSetName='Set0')],     [Alias('itdte')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${IntelTDTEnabled},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_RuleSpecificExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('oobers')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${OobeEnableRtpAndSigUpdate},,     [Parameter(ParameterSetName='Set0')],     [Alias('pms')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Enabled','Disabled')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType],     ${PerformanceModeStatus},,     [Parameter(ParameterSetName='Set0')],     [Alias('qsie')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','ScanRtpExclusions')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType],     ${QuickScanIncludeExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCacheMaintenance},,     [Parameter(ParameterSetName='Set0')],     [Alias('rstpc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${RemoveScanningThreadPoolCap},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcsei')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCoreServiceECSIntegration},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCoreServiceTelemetry},,     [Parameter(ParameterSetName='Set0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Set0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Set0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionPath')) {,           [object]$__cmdletization_value = ${ExclusionPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {,           [object]$__cmdletization_value = ${ExclusionExtension},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {,           [objec","MapDescription":"Contains contents of scripts run","ChunkNumber":1,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"2\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"[]],     ${ThreatIDDefaultAction_Actions},,     [Parameter(ParameterSetName='Set0')],     [Alias('unktdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${UnknownThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [Alias('ltdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${LowThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [Alias('mtdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${ModerateThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [Alias('htdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${HighThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [Alias('stdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction],     ${SevereThreatDefaultAction},,     [Parameter(ParameterSetName='Set0')],     [switch],     ${Force},,     [Parameter(ParameterSetName='Set0')],     [Alias('dbaf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableBlockAtFirstSeen},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','Enabled','AuditMode')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType],     ${PUAProtection},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Default','Moderate','High','HighPlus','ZeroTolerance')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType],     ${CloudBlockLevel},,     [Parameter(ParameterSetName='Set0')],     [Alias('cloudextimeout')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${CloudExtendedTimeout},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','Enabled','AuditMode')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType],     ${EnableNetworkProtection},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','Enabled','AuditMode','BlockDiskModificationOnly','AuditDiskModificationOnly')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType],     ${EnableControlledFolderAccess},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionOnlyExclusions},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessAllowedApplications},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessProtectedFolders},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_Ids},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]],     ${AttackSurfaceReductionRules_Actions},,     [Parameter(ParameterSetName='Set0')],     [Alias('elcp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableLowCpuPriority},,     [Parameter(ParameterSetName='Set0')],     [Alias('efhc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableFileHashComputation},,     [Parameter(ParameterSetName='Set0')],     [Alias('efsobp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableFullScanOnBatteryPower},,     [Parameter(ParameterSetName='Set0')],     [Alias('ppurl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ProxyPacUrl},,     [Parameter(ParameterSetName='Set0')],     [Alias('proxsrv')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ProxyServer},,     [Parameter(ParameterSetName='Set0')],     [Alias('proxbps')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ProxyBypass},,     [Parameter(ParameterSetName='Set0')],     [Alias('fupo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${ForceUseProxyOnly},,     [Parameter(ParameterSetName='Set0')],     [Alias('dtlsp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableTlsParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dftpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableFtpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dhttpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableHttpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('ddnsp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableDnsParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('ddnstcpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableDnsOverTcpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dsshp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableSshParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('puc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType],     ${PlatformUpdatesChannel},,     [Parameter(ParameterSetName='Set0')],     [Alias('euc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType],     ${EngineUpdatesChannel},,     [Parameter(ParameterSetName='Set0')],     [Alias('duc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('NotConfigured','Staged','Broad')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType],     ${DefinitionUpdatesChannel},,     [Parameter(ParameterSetName='Set0')],     [Alias('dgr')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableGradualRelease},,     [Parameter(ParameterSetName='Set0')],     [Alias('anpdl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${AllowNetworkProtectionDownLevel},,     [Parameter(ParameterSetName='Set0')],     [Alias('adpows')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${AllowDatagramProcessingOnWinServer},,     [Parameter(ParameterSetName='Set0')],     [Alias('ednss')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableDnsSinkhole},,     [Parameter(ParameterSetName='Set0')],     [Alias('dicf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableInboundConnectionFiltering},,     [Parameter(ParameterSetName='Set0')],     [Alias('drdpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableRdpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dnppt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableNetworkProtectionPerfTelemetry},,     [Parameter(ParameterSetName='Set0')],     [Alias('tlps')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${TrustLabelProtectionStatus},,     [Parameter(ParameterSetName='Set0')],     [Alias('astai')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${AllowSwitchToAsyncInspection},,     [Parameter(ParameterSetName='Set0')],     [Alias('scso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${ScanScheduleOffset},,     [Parameter(ParameterSetName='Set0')],     [Alias('dtdtf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableTDTFeature},,     [Parameter(ParameterSetName='Set0')],     [Alias('dtp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableTamperProtection},,     [Parameter(ParameterSetName='Set0')],     [Alias('dsmtpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableSmtpParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('dquicp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableQuicParsing},,     [Parameter(ParameterSetName='Set0')],     [Alias('nprepmode')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32],     ${NetworkProtectionReputationMode},,     [Parameter(ParameterSetName='Set0')],     [Alias('euso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableUdpSegmentationOffload},,     [Parameter(ParameterSetName='Set0')],     [Alias('euro')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${EnableUdpReceiveOffload},,     [Parameter(ParameterSetName='Set0')],     [Alias('itdte')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${IntelTDTEnabled},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},,     [Parameter(ParameterSetName='Set0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_RuleSpecificExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('oobers')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${OobeEnableRtpAndSigUpdate},,     [Parameter(ParameterSetName='Set0')],     [Alias('pms')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Enabled','Disabled')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType],     ${PerformanceModeStatus},,     [Parameter(ParameterSetName='Set0')],     [Alias('qsie')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('Disabled','ScanRtpExclusions')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType],     ${QuickScanIncludeExclusions},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCacheMaintenance},,     [Parameter(ParameterSetName='Set0')],     [Alias('rstpc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${RemoveScanningThreadPoolCap},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcsei')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCoreServiceECSIntegration},,     [Parameter(ParameterSetName='Set0')],     [Alias('dcst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [bool],     ${DisableCoreServiceTelemetry},,     [Parameter(ParameterSetName='Set0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Set0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Set0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionPath')) {,           [object]$__cmdletization_value = ${ExclusionPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {,           [object]$__cmdletization_value = ${ExclusionExtension},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {,           [objec\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76666","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9409946+00:00","RecordNumber":6}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: t]$__cmdletization_value = ${ExclusionProcess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {,           [object]$__cmdletization_value = ${ExclusionIpAddress},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {,           [object]$__cmdletization_value = ${RealTimeScanDirection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {,           [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {,           [object]$__cmdletization_value = ${RemediationScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {,           [object]$__cmdletization_value = ${RemediationScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionConfiguredState')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionConfiguredState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionMaxBlockTime')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionMaxBlockTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionAggressiveness')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionAggressiveness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionConfiguredState')) {,           [object]$__cmdletization_value = ${BruteForceProtectionConfiguredState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionMaxBlockTime')) {,           [object]$__cmdletization_value = ${BruteForceProtectionMaxBlockTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionAggressiveness')) {,           [object]$__cmdletization_value = ${BruteForceProtectionAggressiveness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {,           [object]$__cmdletization_value = ${BruteForceProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionLocalNetworkBlocking')) {,           [object]$__cmdletization_value = ${BruteForceProtectionLocalNetworkBlocking},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionLocalNetworkBlocking'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionLocalNetworkBlocking'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionSkipLearningPeriod')) {,           [object]$__cmdletization_value = ${BruteForceProtectionSkipLearningPeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionSkipLearningPeriod'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionSkipLearningPeriod'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdleti","MapDescription":"Contains contents of scripts run","ChunkNumber":1,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"3\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"t]$__cmdletization_value = ${ExclusionProcess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {,           [object]$__cmdletization_value = ${ExclusionIpAddress},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {,           [object]$__cmdletization_value = ${RealTimeScanDirection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {,           [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {,           [object]$__cmdletization_value = ${RemediationScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {,           [object]$__cmdletization_value = ${RemediationScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionConfiguredState')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionConfiguredState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionMaxBlockTime')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionMaxBlockTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionAggressiveness')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionAggressiveness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionConfiguredState')) {,           [object]$__cmdletization_value = ${BruteForceProtectionConfiguredState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionMaxBlockTime')) {,           [object]$__cmdletization_value = ${BruteForceProtectionMaxBlockTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionAggressiveness')) {,           [object]$__cmdletization_value = ${BruteForceProtectionAggressiveness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {,           [object]$__cmdletization_value = ${BruteForceProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionLocalNetworkBlocking')) {,           [object]$__cmdletization_value = ${BruteForceProtectionLocalNetworkBlocking},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionLocalNetworkBlocking'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionLocalNetworkBlocking'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionSkipLearningPeriod')) {,           [object]$__cmdletization_value = ${BruteForceProtectionSkipLearningPeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionSkipLearningPeriod'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionSkipLearningPeriod'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdleti\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76667","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9410089+00:00","RecordNumber":7}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: zation_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {,           [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {,           [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {,           [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {,           [object]$__cmdletization_value = ${ServiceHealthReportInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {,           [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {,           [object]$__cmdletization_value = ${ScanAvgCPULoadFactor},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {,           [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {,           [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {,           [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanParameters')) {,           [object]$__cmdletization_value = ${ScanParameters},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {,           [object]$__cmdletization_value = ${ScanScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {,           [object]$__cmdletization_value = ${ScanScheduleQuickScanTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {,           [object]$__cmdletization_value = ${ScanScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {,           [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {,           [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {,           [object]$__cmdletization_value = ${SignatureAuGracePeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {,           [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},        ","MapDescription":"Contains contents of scripts run","ChunkNumber":2,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"4\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"zation_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {,           [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {,           [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {,           [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {,           [object]$__cmdletization_value = ${ServiceHealthReportInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {,           [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {,           [object]$__cmdletization_value = ${ScanAvgCPULoadFactor},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {,           [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {,           [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {,           [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanParameters')) {,           [object]$__cmdletization_value = ${ScanParameters},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {,           [object]$__cmdletization_value = ${ScanScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {,           [object]$__cmdletization_value = ${ScanScheduleQuickScanTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {,           [object]$__cmdletization_value = ${ScanScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {,           [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {,           [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {,           [object]$__cmdletization_value = ${SignatureAuGracePeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {,           [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},        \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76668","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9410292+00:00","RecordNumber":8}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText:  } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {,           [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {,           [object]$__cmdletization_value = ${SignatureFallbackOrder},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {,           [object]$__cmdletization_value = ${SharedSignaturesPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SharedSignaturesPathUpdateAtScheduledTimeOnly')) {,           [object]$__cmdletization_value = ${SharedSignaturesPathUpdateAtScheduledTimeOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {,           [object]$__cmdletization_value = ${SignatureScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {,           [object]$__cmdletization_value = ${SignatureScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {,           [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {,           [object]$__cmdletization_value = ${SignatureUpdateInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {,           [object]$__cmdletization_value = ${SignatureBlobUpdateInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {,           [object]$__cmdletization_value = ${SignatureBlobFileSharesSources},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {,           [object]$__cmdletization_value = ${MeteredConnectionUpdates},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {,           [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {,           [object]$__cmdletization_value = ${DisableDatagramProcessing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableConvertWarnToBlock')) {,           [object]$__cmdletization_value = ${EnableConvertWarnToBlock},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {,           [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MAPSReporting')) {,           [object]$__cmdletization_value = ${MAPSReporting},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBou","MapDescription":"Contains contents of scripts run","ChunkNumber":2,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"5\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\" } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {,           [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {,           [object]$__cmdletization_value = ${SignatureFallbackOrder},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {,           [object]$__cmdletization_value = ${SharedSignaturesPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SharedSignaturesPathUpdateAtScheduledTimeOnly')) {,           [object]$__cmdletization_value = ${SharedSignaturesPathUpdateAtScheduledTimeOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {,           [object]$__cmdletization_value = ${SignatureScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {,           [object]$__cmdletization_value = ${SignatureScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {,           [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {,           [object]$__cmdletization_value = ${SignatureUpdateInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {,           [object]$__cmdletization_value = ${SignatureBlobUpdateInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {,           [object]$__cmdletization_value = ${SignatureBlobFileSharesSources},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {,           [object]$__cmdletization_value = ${MeteredConnectionUpdates},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {,           [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {,           [object]$__cmdletization_value = ${DisableDatagramProcessing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableConvertWarnToBlock')) {,           [object]$__cmdletization_value = ${EnableConvertWarnToBlock},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {,           [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MAPSReporting')) {,           [object]$__cmdletization_value = ${MAPSReporting},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBou\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76669","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9410434+00:00","RecordNumber":9}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: ndParameters.ContainsKey('SubmitSamplesConsent')) {,           [object]$__cmdletization_value = ${SubmitSamplesConsent},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {,           [object]$__cmdletization_value = ${DisableAutoExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {,           [object]$__cmdletization_value = ${DisablePrivacyMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {,           [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {,           [object]$__cmdletization_value = ${SchedulerRandomizationTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {,           [object]$__cmdletization_value = ${DisableBehaviorMonitoring},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {,           [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {,           [object]$__cmdletization_value = ${DisableIOAVProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {,           [object]$__cmdletization_value = ${DisableRealtimeMonitoring},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {,           [object]$__cmdletization_value = ${DisableScriptScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {,           [object]$__cmdletization_value = ${DisableArchiveScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {,           [object]$__cmdletization_value = ${DisableCatchupFullScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {,           [object]$__cmdletization_value = ${DisableCatchupQuickScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {,           [object]$__cmdletization_value = ${DisableEmailScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {,           [object]$__cmdletization_value = ${DisableRemovableDriveScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {,           [object]$__cmdletization_value = ${DisableRestorePoint},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {,           [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object","MapDescription":"Contains contents of scripts run","ChunkNumber":3,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"6\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"ndParameters.ContainsKey('SubmitSamplesConsent')) {,           [object]$__cmdletization_value = ${SubmitSamplesConsent},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {,           [object]$__cmdletization_value = ${DisableAutoExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {,           [object]$__cmdletization_value = ${DisablePrivacyMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {,           [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {,           [object]$__cmdletization_value = ${SchedulerRandomizationTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {,           [object]$__cmdletization_value = ${DisableBehaviorMonitoring},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {,           [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {,           [object]$__cmdletization_value = ${DisableIOAVProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {,           [object]$__cmdletization_value = ${DisableRealtimeMonitoring},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {,           [object]$__cmdletization_value = ${DisableScriptScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {,           [object]$__cmdletization_value = ${DisableArchiveScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {,           [object]$__cmdletization_value = ${DisableCatchupFullScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {,           [object]$__cmdletization_value = ${DisableCatchupQuickScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {,           [object]$__cmdletization_value = ${DisableEmailScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {,           [object]$__cmdletization_value = ${DisableRemovableDriveScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {,           [object]$__cmdletization_value = ${DisableRestorePoint},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {,           [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76670","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9410556+00:00","RecordNumber":10}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: ]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {,           [object]$__cmdletization_value = ${DisableScanningNetworkFiles},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ApplyDisableNetworkScanningToIOAV')) {,           [object]$__cmdletization_value = ${ApplyDisableNetworkScanningToIOAV},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UILockdown')) {,           [object]$__cmdletization_value = ${UILockdown},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {,           [object]$__cmdletization_value = ${UnknownThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {,           [object]$__cmdletization_value = ${LowThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {,           [object]$__cmdletization_value = ${ModerateThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {,           [object]$__cmdletization_value = ${HighThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {,           [object]$__cmdletization_value = ${SevereThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Force')) {,           [object]$__cmdletization_value = ${Force},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {,           [object]$__cmdletization_value = ${DisableBlockAtFirstSeen},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PUAProtection')) {,           [object]$__cmdletization_value = ${PUAProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {,           [object]$__cmdletization_value = ${CloudBlockLevel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {,           [object]$__cmdletization_value = ${CloudExtendedTimeout},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {,           [object]$__cmdletization_value = ${EnableNetworkProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_def","MapDescription":"Contains contents of scripts run","ChunkNumber":3,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"7\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {,           [object]$__cmdletization_value = ${DisableScanningNetworkFiles},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ApplyDisableNetworkScanningToIOAV')) {,           [object]$__cmdletization_value = ${ApplyDisableNetworkScanningToIOAV},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UILockdown')) {,           [object]$__cmdletization_value = ${UILockdown},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {,           [object]$__cmdletization_value = ${UnknownThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {,           [object]$__cmdletization_value = ${LowThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {,           [object]$__cmdletization_value = ${ModerateThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {,           [object]$__cmdletization_value = ${HighThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {,           [object]$__cmdletization_value = ${SevereThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Force')) {,           [object]$__cmdletization_value = ${Force},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {,           [object]$__cmdletization_value = ${DisableBlockAtFirstSeen},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PUAProtection')) {,           [object]$__cmdletization_value = ${PUAProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {,           [object]$__cmdletization_value = ${CloudBlockLevel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {,           [object]$__cmdletization_value = ${CloudExtendedTimeout},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {,           [object]$__cmdletization_value = ${EnableNetworkProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_def\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76671","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9410681+00:00","RecordNumber":11}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: aultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {,           [object]$__cmdletization_value = ${EnableControlledFolderAccess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {,           [object]$__cmdletization_value = ${EnableLowCpuPriority},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {,           [object]$__cmdletization_value = ${EnableFileHashComputation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {,           [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {,           [object]$__cmdletization_value = ${ProxyPacUrl},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyServer')) {,           [object]$__cmdletization_value = ${ProxyServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyBypass')) {,           [object]$__cmdletization_value = ${ProxyBypass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {,           [object]$__cmdletization_value = ${ForceUseProxyOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {,           [object]$__cmdletization_value = ${DisableTlsParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableFtpParsing')) {,           [object]$__cmdletization_value = ${DisableFtpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {,           [object]$__cmdletization_value = ${DisableHttpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {,           [object]$__cmdletization_value = ${DisableDnsParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParame","MapDescription":"Contains contents of scripts run","ChunkNumber":4,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"8\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"aultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {,           [object]$__cmdletization_value = ${EnableControlledFolderAccess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {,           [object]$__cmdletization_value = ${EnableLowCpuPriority},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {,           [object]$__cmdletization_value = ${EnableFileHashComputation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {,           [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {,           [object]$__cmdletization_value = ${ProxyPacUrl},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyServer')) {,           [object]$__cmdletization_value = ${ProxyServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyBypass')) {,           [object]$__cmdletization_value = ${ProxyBypass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {,           [object]$__cmdletization_value = ${ForceUseProxyOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {,           [object]$__cmdletization_value = ${DisableTlsParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableFtpParsing')) {,           [object]$__cmdletization_value = ${DisableFtpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {,           [object]$__cmdletization_value = ${DisableHttpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {,           [object]$__cmdletization_value = ${DisableDnsParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParame\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76672","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9411035+00:00","RecordNumber":12}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: ter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {,           [object]$__cmdletization_value = ${DisableDnsOverTcpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {,           [object]$__cmdletization_value = ${DisableSshParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {,           [object]$__cmdletization_value = ${PlatformUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {,           [object]$__cmdletization_value = ${EngineUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {,           [object]$__cmdletization_value = ${DefinitionUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {,           [object]$__cmdletization_value = ${DisableGradualRelease},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {,           [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {,           [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {,           [object]$__cmdletization_value = ${EnableDnsSinkhole},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {,           [object]$__cmdletization_value = ${DisableInboundConnectionFiltering},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {,           [object]$__cmdletization_value = ${DisableRdpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {,           [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {,           [object]$__cmdletization_value = ${TrustLabelProtectionStatus},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {,           [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {,           [object]$__cmdletization_value = ${ScanScheduleOffset},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {,           [object]$__cmdletization_value = ${DisableTDTFeature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTamperProtection')) {,   ","MapDescription":"Contains contents of scripts run","ChunkNumber":4,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"9\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"ter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {,           [object]$__cmdletization_value = ${DisableDnsOverTcpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {,           [object]$__cmdletization_value = ${DisableSshParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {,           [object]$__cmdletization_value = ${PlatformUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {,           [object]$__cmdletization_value = ${EngineUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {,           [object]$__cmdletization_value = ${DefinitionUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {,           [object]$__cmdletization_value = ${DisableGradualRelease},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {,           [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {,           [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {,           [object]$__cmdletization_value = ${EnableDnsSinkhole},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {,           [object]$__cmdletization_value = ${DisableInboundConnectionFiltering},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {,           [object]$__cmdletization_value = ${DisableRdpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {,           [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {,           [object]$__cmdletization_value = ${TrustLabelProtectionStatus},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {,           [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {,           [object]$__cmdletization_value = ${ScanScheduleOffset},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {,           [object]$__cmdletization_value = ${DisableTDTFeature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTamperProtection')) {,   \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76673","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9411140+00:00","RecordNumber":13}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText:         [object]$__cmdletization_value = ${DisableTamperProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableSmtpParsing')) {,           [object]$__cmdletization_value = ${DisableSmtpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableQuicParsing')) {,           [object]$__cmdletization_value = ${DisableQuicParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NetworkProtectionReputationMode')) {,           [object]$__cmdletization_value = ${NetworkProtectionReputationMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableUdpSegmentationOffload')) {,           [object]$__cmdletization_value = ${EnableUdpSegmentationOffload},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpSegmentationOffload'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpSegmentationOffload'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableUdpReceiveOffload')) {,           [object]$__cmdletization_value = ${EnableUdpReceiveOffload},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpReceiveOffload'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpReceiveOffload'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IntelTDTEnabled')) {,           [object]$__cmdletization_value = ${IntelTDTEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OobeEnableRtpAndSigUpdate')) {,           [object]$__cmdletization_value = ${OobeEnableRtpAndSigUpdate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PerformanceModeStatus')) {,           [object]$__cmdletization_value = ${PerformanceModeStatus},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('QuickScanIncludeExclusions')) {,           [object]$__cmdletization_value = ${QuickScanIncludeExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCacheMaintenance')) {,           [object]$__cmdletization_value = ${DisableCacheMaintenance},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoveScanningThreadPoolCap')) {,           [object]$__cmdletization_value = ${RemoveScanningThreadPoolCap},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCoreServiceECSIntegration')) {,           [object]$__cmdletization_value = ${DisableCoreServiceECSIntegration},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceECSIntegration'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceECSIntegration'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCoreServiceTelemetry')) {,           [object]$__cmdletization_value = ${DisableCoreServiceTelemetry},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             thr","MapDescription":"Contains contents of scripts run","ChunkNumber":5,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"10\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"        [object]$__cmdletization_value = ${DisableTamperProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableSmtpParsing')) {,           [object]$__cmdletization_value = ${DisableSmtpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableQuicParsing')) {,           [object]$__cmdletization_value = ${DisableQuicParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NetworkProtectionReputationMode')) {,           [object]$__cmdletization_value = ${NetworkProtectionReputationMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableUdpSegmentationOffload')) {,           [object]$__cmdletization_value = ${EnableUdpSegmentationOffload},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpSegmentationOffload'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpSegmentationOffload'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableUdpReceiveOffload')) {,           [object]$__cmdletization_value = ${EnableUdpReceiveOffload},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpReceiveOffload'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpReceiveOffload'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IntelTDTEnabled')) {,           [object]$__cmdletization_value = ${IntelTDTEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OobeEnableRtpAndSigUpdate')) {,           [object]$__cmdletization_value = ${OobeEnableRtpAndSigUpdate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PerformanceModeStatus')) {,           [object]$__cmdletization_value = ${PerformanceModeStatus},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('QuickScanIncludeExclusions')) {,           [object]$__cmdletization_value = ${QuickScanIncludeExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCacheMaintenance')) {,           [object]$__cmdletization_value = ${DisableCacheMaintenance},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoveScanningThreadPoolCap')) {,           [object]$__cmdletization_value = ${RemoveScanningThreadPoolCap},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCoreServiceECSIntegration')) {,           [object]$__cmdletization_value = ${DisableCoreServiceECSIntegration},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceECSIntegration'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceECSIntegration'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCoreServiceTelemetry')) {,           [object]$__cmdletization_value = ${DisableCoreServiceTelemetry},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             thr\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76674","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9411432+00:00","RecordNumber":14}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: ow,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-MpPreference' -Alias '*',         , function Add-MpPreference, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionPath},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionExtension},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionProcess},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionIpAddress},,     [Parameter(ParameterSetName='Add1')],     [Alias('tiddefaci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [long[]],     ${ThreatIDDefaultAction_Ids},,     [Parameter(ParameterSetName='Add1')],     [Alias('tiddefaca')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]],     ${ThreatIDDefaultAction_Actions},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionOnlyExclusions},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessAllowedApplications},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessProtectedFolders},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_Ids},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]],     ${AttackSurfaceReductionRules_Actions},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_RuleSpecificExclusions},,     [Parameter(ParameterSetName='Add1')],     [Alias('repe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${RemoteEncryptionProtectionExclusions},,     [Parameter(ParameterSetName='Add1')],     [Alias('bfpe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${BruteForceProtectionExclusions},,     [Parameter(ParameterSetName='Add1')],     [switch],     ${Force},,     [Parameter(ParameterSetName='Add1')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Add1')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Add1')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionPath')) {,           [object]$__cmdletization_value = ${ExclusionPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {,           [object]$__cmdletization_value = ${ExclusionExtension},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {,           [object]$__cmdletization_value = ${ExclusionProcess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {,           [object]$__cmdletization_value = ${ExclusionIpAddress},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdle","MapDescription":"Contains contents of scripts run","ChunkNumber":5,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"11\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"ow,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Set-MpPreference' -Alias '*',         , function Add-MpPreference, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionPath},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionExtension},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionProcess},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionIpAddress},,     [Parameter(ParameterSetName='Add1')],     [Alias('tiddefaci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [long[]],     ${ThreatIDDefaultAction_Ids},,     [Parameter(ParameterSetName='Add1')],     [Alias('tiddefaca')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]],     ${ThreatIDDefaultAction_Actions},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionOnlyExclusions},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessAllowedApplications},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessProtectedFolders},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_Ids},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]],     ${AttackSurfaceReductionRules_Actions},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},,     [Parameter(ParameterSetName='Add1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_RuleSpecificExclusions},,     [Parameter(ParameterSetName='Add1')],     [Alias('repe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${RemoteEncryptionProtectionExclusions},,     [Parameter(ParameterSetName='Add1')],     [Alias('bfpe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${BruteForceProtectionExclusions},,     [Parameter(ParameterSetName='Add1')],     [switch],     ${Force},,     [Parameter(ParameterSetName='Add1')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Add1')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Add1')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionPath')) {,           [object]$__cmdletization_value = ${ExclusionPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {,           [object]$__cmdletization_value = ${ExclusionExtension},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {,           [object]$__cmdletization_value = ${ExclusionProcess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {,           [object]$__cmdletization_value = ${ExclusionIpAddress},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdle\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76675","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9411535+00:00","RecordNumber":15}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: tization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {,           [object]$__cmdletization_value = ${BruteForceProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Force')) {,           [object]$__cmdletization_value = ${Force},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Add', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Add-MpPreference' -Alias '*',         , function Remove-MpPreference, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionPath},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionExtension},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionProcess},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionIpAddress},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rtsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RealTimeScanDirection},,     [Parameter(ParameterSetName='Remove2')],     [Alias('qpiad')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${QuarantinePurgeItemsAfterDelay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemediationScheduleDay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemediationScheduleTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('repcs')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemoteEncryptionProtectionConfiguredState},,     [Parameter(ParameterSetName='Remove2')],     [Alias('repmbt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemoteEncryptionProtectionMaxBlockTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('repa')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemoteEncryptionProtectionAggressiveness},,     [Parameter(ParameterSetName='Remove2')],     [Alias('repe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${RemoteEncryptionProtectionExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpcs')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionConfiguredState},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpmbt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionMaxBlockTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpa')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionAggressiveness},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${BruteForceProtectionExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfplnb')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionLocalNetworkBlocking},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpslp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionSkipLearningPeriod},,     [Parameter(ParameterSetName='Remove2')],     [Alias('raat')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ReportingAdditionalActionTimeOut},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rcto')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ReportingCriticalFailureTimeOut},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rncto')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ReportingNonCriticalTimeOut},,     [Parameter(ParameterSetName='Remove2')],     [Alias('shri')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ServiceHealthReportInterval},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rdsde')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ReportDynamicSignatureDroppedEvent},,     [Parameter(ParameterSetName='Remove2')],     [Alias('saclf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanAvgCPULoadFactor},,     [Parameter(ParameterSetName='Remove2')],     [Alias('csbr')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${CheckForSignaturesBeforeRunningScan},,     [Parameter(ParameterSetName='Remove2')],     [Alias('spiad')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanPurgeItemsAfterDelay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('soiie')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanOnlyIfIdleEnabled},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanParameters},,     [Parameter(ParameterSetName='Remove2')],     [Alias('scsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanScheduleDay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('scsqst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanScheduleQuickScanTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('scst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanScheduleTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('tfsso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ThrottleForScheduledScanOnly},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigfagp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureFirstAuGracePeriod},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigagp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureAuGracePeriod},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigdufss')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureDefinitionUpdateFileSharesSources},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigduoswo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureDisableUpdateOnStartupWithoutEngine},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sfo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureFallbackOrder},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ssp','SecurityIntelligenceLocation','ssl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SharedSignaturesPath},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sspsch','SecurityIntelligenceLocationUpdateAtScheduledTimeOnly')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SharedSignaturesPathUpdateAtScheduledTimeOnly},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureScheduleDay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureScheduleTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('siguci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureUpdateCatchupInterval},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigui')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureUpdateInterval},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigbui')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureBlobUpdateInterval},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigbfs')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureBlobFileSharesSources},,     [Parameter(ParameterSetName='Remove2')],     [Alias('mcupd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${MeteredConnectionUpdates},,     [Parameter(ParameterSetName='Remove2')],     [Alias('anpws')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${AllowNetworkProtectionOnWinServer},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ddtgp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableDatagramProcessing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ecwtb')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableConvertWarnToBlock},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCpuThrottleOnIdleScans},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${MAPSReporting},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SubmitSamplesConsent},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dae')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableAutoExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dpm')],     [ValidateNotNu","MapDescription":"Contains contents of scripts run","ChunkNumber":6,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"12\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"tization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {,           [object]$__cmdletization_value = ${BruteForceProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Force')) {,           [object]$__cmdletization_value = ${Force},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Add', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Add-MpPreference' -Alias '*',         , function Remove-MpPreference, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionPath},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionExtension},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionProcess},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ExclusionIpAddress},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rtsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RealTimeScanDirection},,     [Parameter(ParameterSetName='Remove2')],     [Alias('qpiad')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${QuarantinePurgeItemsAfterDelay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemediationScheduleDay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemediationScheduleTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('repcs')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemoteEncryptionProtectionConfiguredState},,     [Parameter(ParameterSetName='Remove2')],     [Alias('repmbt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemoteEncryptionProtectionMaxBlockTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('repa')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemoteEncryptionProtectionAggressiveness},,     [Parameter(ParameterSetName='Remove2')],     [Alias('repe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${RemoteEncryptionProtectionExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpcs')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionConfiguredState},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpmbt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionMaxBlockTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpa')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionAggressiveness},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpe')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${BruteForceProtectionExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfplnb')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionLocalNetworkBlocking},,     [Parameter(ParameterSetName='Remove2')],     [Alias('bfpslp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${BruteForceProtectionSkipLearningPeriod},,     [Parameter(ParameterSetName='Remove2')],     [Alias('raat')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ReportingAdditionalActionTimeOut},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rcto')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ReportingCriticalFailureTimeOut},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rncto')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ReportingNonCriticalTimeOut},,     [Parameter(ParameterSetName='Remove2')],     [Alias('shri')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ServiceHealthReportInterval},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rdsde')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ReportDynamicSignatureDroppedEvent},,     [Parameter(ParameterSetName='Remove2')],     [Alias('saclf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanAvgCPULoadFactor},,     [Parameter(ParameterSetName='Remove2')],     [Alias('csbr')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${CheckForSignaturesBeforeRunningScan},,     [Parameter(ParameterSetName='Remove2')],     [Alias('spiad')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanPurgeItemsAfterDelay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('soiie')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanOnlyIfIdleEnabled},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanParameters},,     [Parameter(ParameterSetName='Remove2')],     [Alias('scsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanScheduleDay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('scsqst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanScheduleQuickScanTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('scst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanScheduleTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('tfsso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ThrottleForScheduledScanOnly},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigfagp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureFirstAuGracePeriod},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigagp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureAuGracePeriod},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigdufss')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureDefinitionUpdateFileSharesSources},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigduoswo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureDisableUpdateOnStartupWithoutEngine},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sfo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureFallbackOrder},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ssp','SecurityIntelligenceLocation','ssl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SharedSignaturesPath},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sspsch','SecurityIntelligenceLocationUpdateAtScheduledTimeOnly')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SharedSignaturesPathUpdateAtScheduledTimeOnly},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigsd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureScheduleDay},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureScheduleTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('siguci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureUpdateCatchupInterval},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigui')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureUpdateInterval},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigbui')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureBlobUpdateInterval},,     [Parameter(ParameterSetName='Remove2')],     [Alias('sigbfs')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SignatureBlobFileSharesSources},,     [Parameter(ParameterSetName='Remove2')],     [Alias('mcupd')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${MeteredConnectionUpdates},,     [Parameter(ParameterSetName='Remove2')],     [Alias('anpws')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${AllowNetworkProtectionOnWinServer},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ddtgp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableDatagramProcessing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ecwtb')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableConvertWarnToBlock},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCpuThrottleOnIdleScans},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${MAPSReporting},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SubmitSamplesConsent},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dae')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableAutoExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dpm')],     [ValidateNotNu\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76676","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9411857+00:00","RecordNumber":16}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: ll()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisablePrivacyMode},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rstt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RandomizeScheduleTaskTimes},,     [Parameter(ParameterSetName='Remove2')],     [Alias('srt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SchedulerRandomizationTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dbm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableBehaviorMonitoring},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dips')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableIntrusionPreventionSystem},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dioavp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableIOAVProtection},,     [Parameter(ParameterSetName='Remove2')],     [Alias('drtm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableRealtimeMonitoring},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dscrptsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableScriptScanning},,     [Parameter(ParameterSetName='Remove2')],     [Alias('darchsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableArchiveScanning},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcfsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCatchupFullScan},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcqsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCatchupQuickScan},,     [Parameter(ParameterSetName='Remove2')],     [Alias('demsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableEmailScanning},,     [Parameter(ParameterSetName='Remove2')],     [Alias('drdsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableRemovableDriveScanning},,     [Parameter(ParameterSetName='Remove2')],     [Alias('drp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableRestorePoint},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dsmndfsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableScanningMappedNetworkDrivesForFullScan},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dsnf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableScanningNetworkFiles},,     [Parameter(ParameterSetName='Remove2')],     [Alias('adsnftioav')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ApplyDisableNetworkScanningToIOAV},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${UILockdown},,     [Parameter(ParameterSetName='Remove2')],     [Alias('tiddefaci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [long[]],     ${ThreatIDDefaultAction_Ids},,     [Parameter(ParameterSetName='Remove2')],     [Alias('tiddefaca')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]],     ${ThreatIDDefaultAction_Actions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('unktdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${UnknownThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ltdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${LowThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('mtdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ModerateThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('htdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${HighThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('stdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SevereThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dbaf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableBlockAtFirstSeen},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${PUAProtection},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${CloudBlockLevel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('cloudextimeout')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${CloudExtendedTimeout},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableNetworkProtection},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableControlledFolderAccess},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionOnlyExclusions},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessAllowedApplications},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessProtectedFolders},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_Ids},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]],     ${AttackSurfaceReductionRules_Actions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('elcp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableLowCpuPriority},,     [Parameter(ParameterSetName='Remove2')],     [Alias('efhc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableFileHashComputation},,     [Parameter(ParameterSetName='Remove2')],     [Alias('efsobp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableFullScanOnBatteryPower},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ppurl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ProxyPacUrl},,     [Parameter(ParameterSetName='Remove2')],     [Alias('proxsrv')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ProxyServer},,     [Parameter(ParameterSetName='Remove2')],     [Alias('proxbps')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ProxyBypass},,     [Parameter(ParameterSetName='Remove2')],     [Alias('fupo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ForceUseProxyOnly},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dtlsp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableTlsParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dftpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableFtpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dhttpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableHttpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ddnsp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableDnsParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ddnstcpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableDnsOverTcpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dsshp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableSshParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('puc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${PlatformUpdatesChannel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('euc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EngineUpdatesChannel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('duc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DefinitionUpdatesChannel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dgr')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableGradualRelease},,     [Parameter(ParameterSetName='Remove2')],     [Alias('anpdl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${AllowNetworkProtectionDownLevel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('adpows')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${AllowDatagramProcessingOnWinServer},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ednss')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableDnsSinkhole},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dicf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableInboundConnectionFiltering},,     [Parameter(ParameterSetName='Remove2')],     [Alias('drdpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableRdpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dnppt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableNetworkProtectionPerfTelemetry},,     [Parameter(ParameterSetName='Remove2')],     [Alias('tlps')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${TrustLabelProtectionStatus},,     [Parameter(ParameterSetName='Remove2')],     [Alias('astai')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${AllowSwitchToAsyncInspection},,     [Parameter(ParameterSetName='Remove2')],     [Alias('scso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanScheduleOffset},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dtdtf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableTDTFeature},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dsmtpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableSmtpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dquicp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableQuicParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('nprepmode')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${NetworkProtectionReputationMode},,     [Parameter(ParameterSetName='Remove2')],     [Alias('euso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableUdpSegmentationOffload},,     [Parameter(ParameterSetName='Remove2')],     [Alias('euro')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableUdpReceiveOffload},,     [Parameter(ParameterSetName='Remove2')],     [Alias('itdte')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${IntelTDTEnabled},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${AttackSurfaceReductionRules_RuleSpecificExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('oobers')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${OobeEnableRtpAndSigUpdate},,     [Parameter(ParameterSetName='Remove2')],     [Alias('pms')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${PerformanceModeStatus},,     [Parameter(ParameterSetName='Remove2')],     [Alias('qsie')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${QuickScanIncludeExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCacheMaintenance},,     [Parameter(ParameterSetName='Remove2')],     [switch],     ${Force},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rstpc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemoveScanningThreadPoolCap},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcsei')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCoreServiceECSIntegration},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCoreServiceTelemetry},,     [Parameter(ParameterSetName='Remove2')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Remove2')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Remove2')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaul","MapDescription":"Contains contents of scripts run","ChunkNumber":6,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"13\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"ll()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisablePrivacyMode},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rstt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RandomizeScheduleTaskTimes},,     [Parameter(ParameterSetName='Remove2')],     [Alias('srt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SchedulerRandomizationTime},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dbm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableBehaviorMonitoring},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dips')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableIntrusionPreventionSystem},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dioavp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableIOAVProtection},,     [Parameter(ParameterSetName='Remove2')],     [Alias('drtm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableRealtimeMonitoring},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dscrptsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableScriptScanning},,     [Parameter(ParameterSetName='Remove2')],     [Alias('darchsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableArchiveScanning},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcfsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCatchupFullScan},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcqsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCatchupQuickScan},,     [Parameter(ParameterSetName='Remove2')],     [Alias('demsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableEmailScanning},,     [Parameter(ParameterSetName='Remove2')],     [Alias('drdsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableRemovableDriveScanning},,     [Parameter(ParameterSetName='Remove2')],     [Alias('drp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableRestorePoint},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dsmndfsc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableScanningMappedNetworkDrivesForFullScan},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dsnf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableScanningNetworkFiles},,     [Parameter(ParameterSetName='Remove2')],     [Alias('adsnftioav')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ApplyDisableNetworkScanningToIOAV},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${UILockdown},,     [Parameter(ParameterSetName='Remove2')],     [Alias('tiddefaci')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [long[]],     ${ThreatIDDefaultAction_Ids},,     [Parameter(ParameterSetName='Remove2')],     [Alias('tiddefaca')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]],     ${ThreatIDDefaultAction_Actions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('unktdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${UnknownThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ltdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${LowThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('mtdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ModerateThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('htdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${HighThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('stdefac')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${SevereThreatDefaultAction},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dbaf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableBlockAtFirstSeen},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${PUAProtection},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${CloudBlockLevel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('cloudextimeout')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${CloudExtendedTimeout},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableNetworkProtection},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableControlledFolderAccess},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionOnlyExclusions},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessAllowedApplications},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${ControlledFolderAccessProtectedFolders},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${AttackSurfaceReductionRules_Ids},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]],     ${AttackSurfaceReductionRules_Actions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('elcp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableLowCpuPriority},,     [Parameter(ParameterSetName='Remove2')],     [Alias('efhc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableFileHashComputation},,     [Parameter(ParameterSetName='Remove2')],     [Alias('efsobp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableFullScanOnBatteryPower},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ppurl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ProxyPacUrl},,     [Parameter(ParameterSetName='Remove2')],     [Alias('proxsrv')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ProxyServer},,     [Parameter(ParameterSetName='Remove2')],     [Alias('proxbps')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ProxyBypass},,     [Parameter(ParameterSetName='Remove2')],     [Alias('fupo')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ForceUseProxyOnly},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dtlsp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableTlsParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dftpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableFtpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dhttpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableHttpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ddnsp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableDnsParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ddnstcpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableDnsOverTcpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dsshp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableSshParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('puc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${PlatformUpdatesChannel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('euc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EngineUpdatesChannel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('duc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DefinitionUpdatesChannel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dgr')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableGradualRelease},,     [Parameter(ParameterSetName='Remove2')],     [Alias('anpdl')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${AllowNetworkProtectionDownLevel},,     [Parameter(ParameterSetName='Remove2')],     [Alias('adpows')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${AllowDatagramProcessingOnWinServer},,     [Parameter(ParameterSetName='Remove2')],     [Alias('ednss')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableDnsSinkhole},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dicf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableInboundConnectionFiltering},,     [Parameter(ParameterSetName='Remove2')],     [Alias('drdpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableRdpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dnppt')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableNetworkProtectionPerfTelemetry},,     [Parameter(ParameterSetName='Remove2')],     [Alias('tlps')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${TrustLabelProtectionStatus},,     [Parameter(ParameterSetName='Remove2')],     [Alias('astai')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${AllowSwitchToAsyncInspection},,     [Parameter(ParameterSetName='Remove2')],     [Alias('scso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${ScanScheduleOffset},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dtdtf')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableTDTFeature},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dsmtpp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableSmtpParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dquicp')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableQuicParsing},,     [Parameter(ParameterSetName='Remove2')],     [Alias('nprepmode')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${NetworkProtectionReputationMode},,     [Parameter(ParameterSetName='Remove2')],     [Alias('euso')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableUdpSegmentationOffload},,     [Parameter(ParameterSetName='Remove2')],     [Alias('euro')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${EnableUdpReceiveOffload},,     [Parameter(ParameterSetName='Remove2')],     [Alias('itdte')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${IntelTDTEnabled},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},,     [Parameter(ParameterSetName='Remove2')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${AttackSurfaceReductionRules_RuleSpecificExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('oobers')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${OobeEnableRtpAndSigUpdate},,     [Parameter(ParameterSetName='Remove2')],     [Alias('pms')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${PerformanceModeStatus},,     [Parameter(ParameterSetName='Remove2')],     [Alias('qsie')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${QuickScanIncludeExclusions},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcm')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCacheMaintenance},,     [Parameter(ParameterSetName='Remove2')],     [switch],     ${Force},,     [Parameter(ParameterSetName='Remove2')],     [Alias('rstpc')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${RemoveScanningThreadPoolCap},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcsei')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCoreServiceECSIntegration},,     [Parameter(ParameterSetName='Remove2')],     [Alias('dcst')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${DisableCoreServiceTelemetry},,     [Parameter(ParameterSetName='Remove2')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Remove2')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Remove2')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaul\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76677","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9412033+00:00","RecordNumber":17}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: tValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionPath')) {,           [object]$__cmdletization_value = ${ExclusionPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {,           [object]$__cmdletization_value = ${ExclusionExtension},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {,           [object]$__cmdletization_value = ${ExclusionProcess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {,           [object]$__cmdletization_value = ${ExclusionIpAddress},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {,           [object]$__cmdletization_value = ${RealTimeScanDirection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {,           [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {,           [object]$__cmdletization_value = ${RemediationScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {,           [object]$__cmdletization_value = ${RemediationScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionConfiguredState')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionConfiguredState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionMaxBlockTime')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionMaxBlockTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionAggressiveness')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionAggressiveness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionConfiguredState')) {,           [object]$__cmdletization_value = ${BruteForceProtectionConfiguredState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionMaxBlockTime')) {,           [object]$__cmdletization_value = ${BruteForceProtectionMaxBlockTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionAggressiveness')) {,           [object]$__cmdletization_value = ${BruteForceProtectionAggressiveness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {,           [object]$__cmdletization_value = ${BruteForceProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtecti","MapDescription":"Contains contents of scripts run","ChunkNumber":7,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"14\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"tValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionPath')) {,           [object]$__cmdletization_value = ${ExclusionPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {,           [object]$__cmdletization_value = ${ExclusionExtension},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {,           [object]$__cmdletization_value = ${ExclusionProcess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {,           [object]$__cmdletization_value = ${ExclusionIpAddress},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {,           [object]$__cmdletization_value = ${RealTimeScanDirection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {,           [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {,           [object]$__cmdletization_value = ${RemediationScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {,           [object]$__cmdletization_value = ${RemediationScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionConfiguredState')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionConfiguredState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionMaxBlockTime')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionMaxBlockTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionAggressiveness')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionAggressiveness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {,           [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionConfiguredState')) {,           [object]$__cmdletization_value = ${BruteForceProtectionConfiguredState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionMaxBlockTime')) {,           [object]$__cmdletization_value = ${BruteForceProtectionMaxBlockTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionAggressiveness')) {,           [object]$__cmdletization_value = ${BruteForceProtectionAggressiveness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {,           [object]$__cmdletization_value = ${BruteForceProtectionExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtecti\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76678","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9412192+00:00","RecordNumber":18}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: onLocalNetworkBlocking')) {,           [object]$__cmdletization_value = ${BruteForceProtectionLocalNetworkBlocking},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionLocalNetworkBlocking'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionLocalNetworkBlocking'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionSkipLearningPeriod')) {,           [object]$__cmdletization_value = ${BruteForceProtectionSkipLearningPeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionSkipLearningPeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionSkipLearningPeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {,           [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {,           [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {,           [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {,           [object]$__cmdletization_value = ${ServiceHealthReportInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {,           [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {,           [object]$__cmdletization_value = ${ScanAvgCPULoadFactor},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {,           [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {,           [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {,           [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanParameters')) {,           [object]$__cmdletization_value = ${ScanParameters},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {,           [object]$__cmdletization_value = ${ScanScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {,           [object]$__cmdletization_value = ${ScanScheduleQuickScanTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {,           [object]$__cmdletization_value = ${ScanScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {,           [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),   ","MapDescription":"Contains contents of scripts run","ChunkNumber":7,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"15\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"onLocalNetworkBlocking')) {,           [object]$__cmdletization_value = ${BruteForceProtectionLocalNetworkBlocking},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionLocalNetworkBlocking'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionLocalNetworkBlocking'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('BruteForceProtectionSkipLearningPeriod')) {,           [object]$__cmdletization_value = ${BruteForceProtectionSkipLearningPeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionSkipLearningPeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionSkipLearningPeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {,           [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {,           [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {,           [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {,           [object]$__cmdletization_value = ${ServiceHealthReportInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {,           [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {,           [object]$__cmdletization_value = ${ScanAvgCPULoadFactor},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {,           [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {,           [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {,           [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanParameters')) {,           [object]$__cmdletization_value = ${ScanParameters},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {,           [object]$__cmdletization_value = ${ScanScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {,           [object]$__cmdletization_value = ${ScanScheduleQuickScanTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {,           [object]$__cmdletization_value = ${ScanScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {,           [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),   \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76679","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9412357+00:00","RecordNumber":19}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText:       [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {,           [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {,           [object]$__cmdletization_value = ${SignatureAuGracePeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {,           [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {,           [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {,           [object]$__cmdletization_value = ${SignatureFallbackOrder},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {,           [object]$__cmdletization_value = ${SharedSignaturesPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SharedSignaturesPathUpdateAtScheduledTimeOnly')) {,           [object]$__cmdletization_value = ${SharedSignaturesPathUpdateAtScheduledTimeOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {,           [object]$__cmdletization_value = ${SignatureScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {,           [object]$__cmdletization_value = ${SignatureScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {,           [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {,           [object]$__cmdletization_value = ${SignatureUpdateInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {,           [object]$__cmdletization_value = ${SignatureBlobUpdateInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {,           [object]$__cmdletization_value = ${SignatureBlobFileSharesSources},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {,           [object]$__cmdletization_value = ${MeteredConnectionUpdates},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {,           [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {,           [object]$__cmdletization_value = ${DisableDatagramProcessing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDat","MapDescription":"Contains contents of scripts run","ChunkNumber":8,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"16\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"      [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {,           [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {,           [object]$__cmdletization_value = ${SignatureAuGracePeriod},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {,           [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {,           [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {,           [object]$__cmdletization_value = ${SignatureFallbackOrder},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {,           [object]$__cmdletization_value = ${SharedSignaturesPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SharedSignaturesPathUpdateAtScheduledTimeOnly')) {,           [object]$__cmdletization_value = ${SharedSignaturesPathUpdateAtScheduledTimeOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {,           [object]$__cmdletization_value = ${SignatureScheduleDay},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {,           [object]$__cmdletization_value = ${SignatureScheduleTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {,           [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {,           [object]$__cmdletization_value = ${SignatureUpdateInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {,           [object]$__cmdletization_value = ${SignatureBlobUpdateInterval},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {,           [object]$__cmdletization_value = ${SignatureBlobFileSharesSources},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {,           [object]$__cmdletization_value = ${MeteredConnectionUpdates},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {,           [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {,           [object]$__cmdletization_value = ${DisableDatagramProcessing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDat\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76680","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9412526+00:00","RecordNumber":20}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: agramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableConvertWarnToBlock')) {,           [object]$__cmdletization_value = ${EnableConvertWarnToBlock},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {,           [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MAPSReporting')) {,           [object]$__cmdletization_value = ${MAPSReporting},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {,           [object]$__cmdletization_value = ${SubmitSamplesConsent},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {,           [object]$__cmdletization_value = ${DisableAutoExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {,           [object]$__cmdletization_value = ${DisablePrivacyMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {,           [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {,           [object]$__cmdletization_value = ${SchedulerRandomizationTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {,           [object]$__cmdletization_value = ${DisableBehaviorMonitoring},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {,           [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {,           [object]$__cmdletization_value = ${DisableIOAVProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {,           [object]$__cmdletization_value = ${DisableRealtimeMonitoring},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {,           [object]$__cmdletization_value = ${DisableScriptScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {,           [object]$__cmdletization_value = ${DisableArchiveScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {,           [object]$__cmdletization_value = ${DisableCatchupFullScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {,           [object]$__cmdletization_value = ${DisableCatchupQuickScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Aut","MapDescription":"Contains contents of scripts run","ChunkNumber":8,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"17\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"agramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableConvertWarnToBlock')) {,           [object]$__cmdletization_value = ${EnableConvertWarnToBlock},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {,           [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MAPSReporting')) {,           [object]$__cmdletization_value = ${MAPSReporting},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {,           [object]$__cmdletization_value = ${SubmitSamplesConsent},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {,           [object]$__cmdletization_value = ${DisableAutoExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {,           [object]$__cmdletization_value = ${DisablePrivacyMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {,           [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {,           [object]$__cmdletization_value = ${SchedulerRandomizationTime},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {,           [object]$__cmdletization_value = ${DisableBehaviorMonitoring},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {,           [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {,           [object]$__cmdletization_value = ${DisableIOAVProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {,           [object]$__cmdletization_value = ${DisableRealtimeMonitoring},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {,           [object]$__cmdletization_value = ${DisableScriptScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {,           [object]$__cmdletization_value = ${DisableArchiveScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {,           [object]$__cmdletization_value = ${DisableCatchupFullScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {,           [object]$__cmdletization_value = ${DisableCatchupQuickScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Aut\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76681","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9412671+00:00","RecordNumber":21}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: omation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {,           [object]$__cmdletization_value = ${DisableEmailScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {,           [object]$__cmdletization_value = ${DisableRemovableDriveScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {,           [object]$__cmdletization_value = ${DisableRestorePoint},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {,           [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {,           [object]$__cmdletization_value = ${DisableScanningNetworkFiles},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ApplyDisableNetworkScanningToIOAV')) {,           [object]$__cmdletization_value = ${ApplyDisableNetworkScanningToIOAV},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UILockdown')) {,           [object]$__cmdletization_value = ${UILockdown},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {,           [object]$__cmdletization_value = ${UnknownThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {,           [object]$__cmdletization_value = ${LowThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {,           [object]$__cmdletization_value = ${ModerateThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {,           [object]$__cmdletization_value = ${HighThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {,           [object]$__cmdletization_value = ${SevereThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {,           [object]$__cmdletization_value = ${DisableBlockAtFirstSeen},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PUAProtection')) {,           [object]$__cmdletization_value = ${PUAProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{","MapDescription":"Contains contents of scripts run","ChunkNumber":9,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"18\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"omation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {,           [object]$__cmdletization_value = ${DisableEmailScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {,           [object]$__cmdletization_value = ${DisableRemovableDriveScanning},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {,           [object]$__cmdletization_value = ${DisableRestorePoint},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {,           [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {,           [object]$__cmdletization_value = ${DisableScanningNetworkFiles},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ApplyDisableNetworkScanningToIOAV')) {,           [object]$__cmdletization_value = ${ApplyDisableNetworkScanningToIOAV},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UILockdown')) {,           [object]$__cmdletization_value = ${UILockdown},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {,           [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {,           [object]$__cmdletization_value = ${UnknownThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {,           [object]$__cmdletization_value = ${LowThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {,           [object]$__cmdletization_value = ${ModerateThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {,           [object]$__cmdletization_value = ${HighThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {,           [object]$__cmdletization_value = ${SevereThreatDefaultAction},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {,           [object]$__cmdletization_value = ${DisableBlockAtFirstSeen},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PUAProtection')) {,           [object]$__cmdletization_value = ${PUAProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76682","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9412818+00:00","RecordNumber":22}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {,           [object]$__cmdletization_value = ${CloudBlockLevel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {,           [object]$__cmdletization_value = ${CloudExtendedTimeout},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {,           [object]$__cmdletization_value = ${EnableNetworkProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {,           [object]$__cmdletization_value = ${EnableControlledFolderAccess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {,           [object]$__cmdletization_value = ${EnableLowCpuPriority},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {,           [object]$__cmdletization_value = ${EnableFileHashComputation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {,           [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {,           [object]$__cmdletization_value = ${ProxyPacUrl},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyServer')) {,           [object]$__cmdletization_value = ${ProxyServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyBypass')) {,           [object]$__cmdletization_value = ${ProxyBypass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {,           [object]$__cmdletization_value = ${ForceUseProxyOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletiz","MapDescription":"Contains contents of scripts run","ChunkNumber":9,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"19\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {,           [object]$__cmdletization_value = ${CloudBlockLevel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {,           [object]$__cmdletization_value = ${CloudExtendedTimeout},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {,           [object]$__cmdletization_value = ${EnableNetworkProtection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {,           [object]$__cmdletization_value = ${EnableControlledFolderAccess},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {,           [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {,           [object]$__cmdletization_value = ${EnableLowCpuPriority},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {,           [object]$__cmdletization_value = ${EnableFileHashComputation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {,           [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {,           [object]$__cmdletization_value = ${ProxyPacUrl},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyServer')) {,           [object]$__cmdletization_value = ${ProxyServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProxyBypass')) {,           [object]$__cmdletization_value = ${ProxyBypass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {,           [object]$__cmdletization_value = ${ForceUseProxyOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletiz\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76683","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9412968+00:00","RecordNumber":23}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: ation_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {,           [object]$__cmdletization_value = ${DisableTlsParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableFtpParsing')) {,           [object]$__cmdletization_value = ${DisableFtpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {,           [object]$__cmdletization_value = ${DisableHttpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {,           [object]$__cmdletization_value = ${DisableDnsParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {,           [object]$__cmdletization_value = ${DisableDnsOverTcpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {,           [object]$__cmdletization_value = ${DisableSshParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {,           [object]$__cmdletization_value = ${PlatformUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {,           [object]$__cmdletization_value = ${EngineUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {,           [object]$__cmdletization_value = ${DefinitionUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {,           [object]$__cmdletization_value = ${DisableGradualRelease},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {,           [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {,           [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {,           [object]$__cmdletization_value = ${EnableDnsSinkhole},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {,           [object]$__cmdletization_value = ${DisableInboundConnectionFiltering},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {,           [object]$__cmdletization_value = ${DisableRdpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {,           [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultVal","MapDescription":"Contains contents of scripts run","ChunkNumber":10,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"20\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"ation_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {,           [object]$__cmdletization_value = ${DisableTlsParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableFtpParsing')) {,           [object]$__cmdletization_value = ${DisableFtpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {,           [object]$__cmdletization_value = ${DisableHttpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {,           [object]$__cmdletization_value = ${DisableDnsParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {,           [object]$__cmdletization_value = ${DisableDnsOverTcpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {,           [object]$__cmdletization_value = ${DisableSshParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {,           [object]$__cmdletization_value = ${PlatformUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {,           [object]$__cmdletization_value = ${EngineUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {,           [object]$__cmdletization_value = ${DefinitionUpdatesChannel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {,           [object]$__cmdletization_value = ${DisableGradualRelease},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {,           [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {,           [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {,           [object]$__cmdletization_value = ${EnableDnsSinkhole},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {,           [object]$__cmdletization_value = ${DisableInboundConnectionFiltering},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {,           [object]$__cmdletization_value = ${DisableRdpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {,           [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultVal\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76684","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9413115+00:00","RecordNumber":24}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: ueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {,           [object]$__cmdletization_value = ${TrustLabelProtectionStatus},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {,           [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {,           [object]$__cmdletization_value = ${ScanScheduleOffset},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {,           [object]$__cmdletization_value = ${DisableTDTFeature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableSmtpParsing')) {,           [object]$__cmdletization_value = ${DisableSmtpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableQuicParsing')) {,           [object]$__cmdletization_value = ${DisableQuicParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NetworkProtectionReputationMode')) {,           [object]$__cmdletization_value = ${NetworkProtectionReputationMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableUdpSegmentationOffload')) {,           [object]$__cmdletization_value = ${EnableUdpSegmentationOffload},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpSegmentationOffload'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpSegmentationOffload'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableUdpReceiveOffload')) {,           [object]$__cmdletization_value = ${EnableUdpReceiveOffload},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpReceiveOffload'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpReceiveOffload'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IntelTDTEnabled')) {,           [object]$__cmdletization_value = ${IntelTDTEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OobeEnableRtpAndSigUpdate')) {,           [object]$__cmdletization_value = ${OobeEnableRtpAndSigUpdate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PerformanceModeStatus')) {,           [object]$__cmdletization_value = ${PerformanceModeStatus},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('QuickScanIncludeExclusions')) {,           [object]$__cmdletization_value = ${QuickScanIncludeExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCacheMaintenance')) {,           [object]$__cmdletization_value = ${DisableCacheMaintenance},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent =","MapDescription":"Contains contents of scripts run","ChunkNumber":10,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"21\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\"ueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {,           [object]$__cmdletization_value = ${TrustLabelProtectionStatus},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {,           [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {,           [object]$__cmdletization_value = ${ScanScheduleOffset},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {,           [object]$__cmdletization_value = ${DisableTDTFeature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableSmtpParsing')) {,           [object]$__cmdletization_value = ${DisableSmtpParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableQuicParsing')) {,           [object]$__cmdletization_value = ${DisableQuicParsing},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NetworkProtectionReputationMode')) {,           [object]$__cmdletization_value = ${NetworkProtectionReputationMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableUdpSegmentationOffload')) {,           [object]$__cmdletization_value = ${EnableUdpSegmentationOffload},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpSegmentationOffload'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpSegmentationOffload'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnableUdpReceiveOffload')) {,           [object]$__cmdletization_value = ${EnableUdpReceiveOffload},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpReceiveOffload'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableUdpReceiveOffload'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IntelTDTEnabled')) {,           [object]$__cmdletization_value = ${IntelTDTEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {,           [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OobeEnableRtpAndSigUpdate')) {,           [object]$__cmdletization_value = ${OobeEnableRtpAndSigUpdate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PerformanceModeStatus')) {,           [object]$__cmdletization_value = ${PerformanceModeStatus},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('QuickScanIncludeExclusions')) {,           [object]$__cmdletization_value = ${QuickScanIncludeExclusions},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCacheMaintenance')) {,           [object]$__cmdletization_value = ${DisableCacheMaintenance},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent =\"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76685","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9413270+00:00","RecordNumber":25}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText:  $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Force')) {,           [object]$__cmdletization_value = ${Force},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoveScanningThreadPoolCap')) {,           [object]$__cmdletization_value = ${RemoveScanningThreadPoolCap},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCoreServiceECSIntegration')) {,           [object]$__cmdletization_value = ${DisableCoreServiceECSIntegration},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceECSIntegration'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceECSIntegration'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCoreServiceTelemetry')) {,           [object]$__cmdletization_value = ${DisableCoreServiceTelemetry},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-MpPreference' -Alias '*',         , function Get-MpPreference, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#root\\Microsoft\\Windows\\Defender\\MSFT_MpPreference')],     param(,     ,     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [int],     ${ThrottleLimit},,     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpPreference' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":11,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"22\"},{\"@Name\":\"MessageTotal\",\"#text\":\"22\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\" $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Force')) {,           [object]$__cmdletization_value = ${Force},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RemoveScanningThreadPoolCap')) {,           [object]$__cmdletization_value = ${RemoveScanningThreadPoolCap},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCoreServiceECSIntegration')) {,           [object]$__cmdletization_value = ${DisableCoreServiceECSIntegration},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceECSIntegration'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceECSIntegration'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DisableCoreServiceTelemetry')) {,           [object]$__cmdletization_value = ${DisableCoreServiceTelemetry},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCoreServiceTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Remove-MpPreference' -Alias '*',         , function Get-MpPreference, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#root\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpPreference')],     param(,     ,     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [int],     ${ThrottleLimit},,     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Get-MpPreference' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"1130f578-31a4-4660-83b3-1101884ac961\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76686","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9413352+00:00","RecordNumber":26}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreat', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Remove-MpThreat, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Remove0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Remove0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Remove0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-MpThreat' -Alias '*',         , function Get-MpThreat, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreat')],     param(,     ,     [Parameter(ParameterSetName='ById')],     [Alias('ID')],     [ValidateNotNull()],     [long[]],     ${ThreatID},,     [Parameter(ParameterSetName='ById')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ThreatID}),         $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpThreat' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":11,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpThreat', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Remove-MpThreat, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Remove0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Remove0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Remove0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Remove-MpThreat' -Alias '*',         , function Get-MpThreat, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpThreat')],     param(,     ,     [Parameter(ParameterSetName='ById')],     [Alias('ID')],     [ValidateNotNull()],     [long[]],     ${ThreatID},,     [Parameter(ParameterSetName='ById')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ThreatID}),         $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Get-MpThreat' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"84bb4ea7-aba6-424c-aae5-af4ac1922091\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76687","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:57.9734288+00:00","RecordNumber":27}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatCatalog', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-MpThreatCatalog, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatCatalog')],     param(,     ,     [Parameter(ParameterSetName='ById')],     [Alias('ID')],     [ValidateNotNull()],     [long[]],     ${ThreatID},,     [Parameter(ParameterSetName='ById')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ThreatID}),         $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpThreatCatalog.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpThreatCatalog' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":11,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpThreatCatalog', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-MpThreatCatalog, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpThreatCatalog')],     param(,     ,     [Parameter(ParameterSetName='ById')],     [Alias('ID')],     [ValidateNotNull()],     [long[]],     ${ThreatID},,     [Parameter(ParameterSetName='ById')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ThreatID}),         $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpThreatCatalog.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Get-MpThreatCatalog' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"9ea2f4ad-bac4-41c4-afa7-3639fd3d75c9\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76688","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:58.0047763+00:00","RecordNumber":28}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatDetection', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-MpThreatDetection, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatDetection')],     param(,     ,     [Parameter(ParameterSetName='ById')],     [Alias('ID')],     [ValidateNotNull()],     [long[]],     ${ThreatID},,     [Parameter(ParameterSetName='ById')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ThreatID}),         $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpThreatDetection.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpThreatDetection' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":11,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpThreatDetection', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-MpThreatDetection, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpThreatDetection')],     param(,     ,     [Parameter(ParameterSetName='ById')],     [Alias('ID')],     [ValidateNotNull()],     [long[]],     ${ThreatID},,     [Parameter(ParameterSetName='ById')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ThreatID}),         $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpThreatDetection.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Get-MpThreatDetection' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"39b61572-8684-4308-ac03-1d9fc6dff097\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76689","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:58.0351368+00:00","RecordNumber":29}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpScan', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Start-MpScan, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Start0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ScanPath},,     [Parameter(ParameterSetName='Start0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('FullScan','QuickScan','CustomScan')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType],     ${ScanType},,     [Parameter(ParameterSetName='Start0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Start0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Start0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanPath')) {,           [object]$__cmdletization_value = ${ScanPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanType')) {,           [object]$__cmdletization_value = ${ScanType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpScan.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Start-MpScan' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":12,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpScan', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Start-MpScan, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Start0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ScanPath},,     [Parameter(ParameterSetName='Start0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('FullScan','QuickScan','CustomScan')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType],     ${ScanType},,     [Parameter(ParameterSetName='Start0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Start0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Start0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanPath')) {,           [object]$__cmdletization_value = ${ScanPath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScanType')) {,           [object]$__cmdletization_value = ${ScanType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpScan.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Start-MpScan' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"ddac8fc8-084c-48cd-a4a3-11a2be174bb0\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76690","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:58.0696366+00:00","RecordNumber":30}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpSignature', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Update-MpSignature, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Update0')],     [AllowEmptyString()],     [AllowNull()],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('InternalDefinitionUpdateServer','MicrosoftUpdateServer','MMPC','FileShares')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource],     ${UpdateSource},,     [Parameter(ParameterSetName='Update0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Update0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Update0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UpdateSource')) {,           [object]$__cmdletization_value = ${UpdateSource},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Update', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpSignature.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Update-MpSignature' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":12,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpSignature', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Update-MpSignature, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Update0')],     [AllowEmptyString()],     [AllowNull()],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('InternalDefinitionUpdateServer','MicrosoftUpdateServer','MMPC','FileShares')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource],     ${UpdateSource},,     [Parameter(ParameterSetName='Update0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Update0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Update0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UpdateSource')) {,           [object]$__cmdletization_value = ${UpdateSource},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Update', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpSignature.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Update-MpSignature' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"6ebac99b-e819-48b2-9c7f-f2fd631b8168\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76691","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:58.1036190+00:00","RecordNumber":31}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpWDOScan', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Start-MpWDOScan, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Start0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Start0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Start0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpWDOScan.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Start-MpWDOScan' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":12,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpWDOScan', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Start-MpWDOScan, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Start0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Start0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Start0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpWDOScan.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Start-MpWDOScan' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"e1cdb8ee-1014-424d-b80a-0c34baf2d0bd\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76692","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:58.1329741+00:00","RecordNumber":32}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpRollback', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Start-MpRollback, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Start0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${Engine},,     [Parameter(ParameterSetName='Start0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${Platform},,     [Parameter(ParameterSetName='Start0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Start0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Start0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Engine')) {,           [object]$__cmdletization_value = ${Engine},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Platform')) {,           [object]$__cmdletization_value = ${Platform},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpRollback.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Start-MpRollback' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":12,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpRollback', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Start-MpRollback, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Start0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${Engine},,     [Parameter(ParameterSetName='Start0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${Platform},,     [Parameter(ParameterSetName='Start0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Start0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Start0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Engine')) {,           [object]$__cmdletization_value = ${Engine},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Platform')) {,           [object]$__cmdletization_value = ${Platform},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpRollback.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Start-MpRollback' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"cde70c44-1964-493d-bf0c-730e7308da8a\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76693","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:58.1795479+00:00","RecordNumber":33}
{"PayloadData1":"Path: ","PayloadData2":"ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'root\\Microsoft\\Windows\\Defender\\MSFT_MpBehavioralNetworkBlockingRules', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Remove-MpBehavioralNetworkBlockingRules, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Remove0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FilterGUID},,     [Parameter(ParameterSetName='Remove0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Remove0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Remove0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilterGUID')) {,           [object]$__cmdletization_value = ${FilterGUID},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilterGUID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilterGUID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpBehavioralNetworkBlockingRules.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-MpBehavioralNetworkBlockingRules' -Alias '*',         , function Get-MpBehavioralNetworkBlockingRules, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#root\\Microsoft\\Windows\\Defender\\MSFT_MpBehavioralNetworkBlockingRules')],     param(,     ,     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [int],     ${ThrottleLimit},,     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpBehavioralNetworkBlockingRules.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpBehavioralNetworkBlockingRules' -Alias '*',         , ","MapDescription":"Contains contents of scripts run","ChunkNumber":13,"Computer":"Dell_G15","Payload":"{\"EventData\":{\"Data\":[{\"@Name\":\"MessageNumber\",\"#text\":\"1\"},{\"@Name\":\"MessageTotal\",\"#text\":\"1\"},{\"@Name\":\"ScriptBlockText\",\"#text\":\", #requires -version 3.0, try { Microsoft.PowerShell.Core\\\\Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'root\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpBehavioralNetworkBlockingRules', $script:ClassVersion = '1.0', $script:ModuleVersion = '1.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Remove-MpBehavioralNetworkBlockingRules, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Remove0')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FilterGUID},,     [Parameter(ParameterSetName='Remove0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Remove0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Remove0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilterGUID')) {,           [object]$__cmdletization_value = ${FilterGUID},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilterGUID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilterGUID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false },       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpBehavioralNetworkBlockingRules.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Remove-MpBehavioralNetworkBlockingRules' -Alias '*',         , function Get-MpBehavioralNetworkBlockingRules, {,     [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#root\\\\Microsoft\\\\Windows\\\\Defender\\\\MSFT_MpBehavioralNetworkBlockingRules')],     param(,     ,     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [int],     ${ThrottleLimit},,     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MSFT_MpBehavioralNetworkBlockingRules.cdxml-Help.xml, }, Microsoft.PowerShell.Core\\\\Export-ModuleMember -Function 'Get-MpBehavioralNetworkBlockingRules' -Alias '*',         , \"},{\"@Name\":\"ScriptBlockId\",\"#text\":\"16322e6b-605d-4920-9717-22a0bcd1863a\"},{\"@Name\":\"Path\"}]}}","UserId":"S-1-5-21-121697702-4060030401-3934769922-1001","Channel":"Microsoft-Windows-PowerShell/Operational","Provider":"Microsoft-Windows-PowerShell","EventId":4104,"EventRecordId":"76694","ProcessId":27924,"ThreadId":23660,"Level":"Warning","Keywords":"0x0","SourceFile":"D:\\LogForge\\Logs\\Windows\\powershell_execution.evtx","ExtraDataOffset":0,"HiddenRecord":false,"TimeCreated":"2025-06-21T00:54:58.2092846+00:00","RecordNumber":34}
